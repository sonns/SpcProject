<?php
namespace App\Controller;

use App\Utility\FunctionCommon;
use Cake\Event\Event;
use Cake\I18n\Time;
use Cake\ORM\TableRegistry;

/**
 * Users Controller
 *
 * @property \App\Model\Table\UsersTable $Users
 */
class UsersController extends AuthMasterController
{
    public $paginate = [
        'limit' => 4
    ];
    public function  initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
    }

    public function beforeFilter(Event $event)
    {

        parent::beforeFilter($event);
    }

    public function profile(){
//      Get and set profile info
        $listTimezone = new FunctionCommon();
        $this->set('timezone', $listTimezone->getTimeZone());
        $this->set('_serialize', ['timezone']);
    }

    public function saveProfile(){
        $this->request->allowMethod('ajax');
        $result = $this->responseData(false,__('The request could not be saved. Please, try again or contact for admin page.'));
        if ($this->request->is('post')) {
            if(isset($this->request->data['hdnmode']) && $this->request->data['hdnmode'] === 'profile'){
                $profile = TableRegistry::get('Profiles');
                $profileInfo = $profile->find()->where(['user_id'=>$this->user->id])->first();
                if (!empty($this->request->data['imgProfile']['name'])) {
                    $file = $this->request->data['imgProfile'];

                    $ext = substr(strtolower(strrchr($file['name'], '.')), 1);
                    $arr_ext = array('jpg', 'jpeg', 'gif','png');
                    if (in_array($ext, $arr_ext)) {
                        $path =  WWW_ROOT . 'file\profile\\';
                        if(!is_dir($path)){
                            mkdir($path, 777,true);
                        }
                        move_uploaded_file($file['tmp_name'], $path . $file['name']);
                        //prepare the filename for database entry
                        $this->request->data['photo'] = $file['name'];
                        unset($this->request->data['imgProfile']);
                        unset($this->request->data['hdnmode']);
                    }
                }
                unset($this->request->data['imgProfile']);
                //add profile
                if(!count($profileInfo)){
                    $profileE = $profile->newEntity();
                    $this->request->data['user_id'] = $this->user->id;
//                    $this->request->data['birthday'] = Time::parse($this->request->data['birthday']);
                    $profileE = $profile->patchEntity($profileE, $this->request->data);
                    if ($profile->save($profileE)) {
                        $result  = ['params'=>$this->request->data , 'status' => 'Success' , 'response'=> __('The request has been saved.')];
                    }
                }else{
                    //update profile
                    $this->request->data['modified'] = Time::now();
                    $profileInfo = $profile->patchEntity($profileInfo, $this->request->data);
                    if ($profile->save($profileInfo)) {
                        $result  = ['params'=>$this->request->data , 'status' => 'Success' , 'response'=> __('Your information has been changed !!!.')];
                    }
                }
            }elseif (isset($this->request->data['hdnmode']) && $this->request->data['hdnmode'] === 'resetpass'){
                $query = $this->Users->query();
                $userInfo =  $query->update()
                    ->set(['password' => (new FunctionCommon)->cipher_encrypt($this->request->data['password'],MCRYPT_KEY)])
                    ->where(['id' => $this->user->id])
                    ->execute();
                if ($userInfo) {
                    $result  = ['params'=>$userInfo , 'status' => 'Success' , 'response'=> __('Your password has been changed !!!.')];
                }
            }

        }
        $this->set('result',$result);
        $this->set('_serialize', ['result']);

    }
    /**
     * Index method
     *
     * @return \Cake\Network\Response|null
     */
    public function index()
    {
        $this->set('users', $this->Users->find('all'));
        $userE = $this->Users->newEntity();
        $users = $this->paginate($this->Users);
        $this->set(compact('users'));
        $this->set('_serialize', ['users']);
        $this->set(compact('userE'));
        $this->set('_serialize', ['userE']);
    }
    /**
     * Add method
     *
     * @return \Cake\Network\Response|void Redirects on successful add, renders view otherwise.
     */
    public function add()
    {
        $roles = TableRegistry::get('Roles');
        if(!$this->request->is('ajax')){

            $listRoles = $roles->find('list', [
                'keyField' => 'id',
                'valueField' => 'display_name',
                'conditions' => ['status' => true,'id >'=>2]
            ]);
            $department = TableRegistry::get('Departments');
            $listDepartments = $department->find('list', [
                'keyField' => 'id',
                'valueField' => 'name',
                'conditions' => ['status' => true,'del_flg' => false]
            ]);
            $this->set(compact('listRoles'));
            $this->set(compact('listDepartments'));
        }else{
            $createUserE = $this->Users->newEntity();
            $this->viewBuilder()->className('AdminTheme.Ajax');
            $isCheck = false;
            $this->set(compact('result'));
            if ($this->request->is('post')) {
                $this->request->data['confirmed'] =  1;
                $createUserE = $this->Users->patchEntity($createUserE, $this->request->data);
                if ($this->Users->save($createUserE)) {
                    $roleUsers = TableRegistry::get('RoleUsers');
                    $roleUserE = $roleUsers->newEntity();
                    $roleUserE->user_id = $createUserE->id;
                    $roleUserE->role_id = $this->request->data['role_id'];
                    $roleUsers->save($roleUserE);
                    $isCheck = true;
                }
                $result = [
                    'status'=> $isCheck,
                    'response'=> $isCheck ?  __('The user has been saved.'): __('The User could not be saved. Please, try again.')
                ];
            }
            $this->set(compact('result'));
            $this->set(compact('_serialize', ['result']));
        }
    }
    public function checkUnique(){
        $this->request->allowMethod('ajax');
        $this->viewBuilder()->className('AdminTheme.Ajax');
//        Check email
        $status = false;
        if($this->checkExist('email')){
            $mode = 1;
            $response = __('This e-mail already exists, please change it');
        }elseif($this->checkExist('username'))
        {
            $mode = 2;
            $response = __('This username already exists, please change it');
        }else{
            $roleUsers = TableRegistry::get('RoleUsers');
            $row =  $roleUsers->find()
                ->orWhere(['Users.dep_id'=>$this->request->data['dep_id'] ,'RoleUsers.role_id'=> $this->request->data['role_id'],'Roles.name'=>'top'])
                ->orWhere([['Users.dep_id'=>$this->request->data['dep_id'] ,'RoleUsers.role_id'=> $this->request->data['role_id'],'Roles.name'=>'manager']])
                ->orWhere([['Users.dep_id'=>$this->request->data['dep_id'] ,'RoleUsers.role_id'=> $this->request->data['role_id'],'Roles.name'=>'sub-manager']])
                ->contain(['Users','Roles'])->first();
//            check rule or  return true
            if(count($row)){
                $mode = 3;
                $response = __('We already have this role in this company');
            }else
            {
                $mode = 4;
                $response =  __("OK!!!");
                $status = true;
            }


        }
        $result = [
            'status'=> $status,
            'mode'=>$mode,
            'response'=>$response
        ];
        $this->set(compact('result'));
        $this->set('_serialize', ['result']);
    }
    private function checkExist($key){
        return $this->Users->find('existsOr',[$key=>$this->request->data[$key]]);
    }
    /**
     * Edit method
     *
     * @param string|null $id User id.
     * @return \Cake\Network\Response|void Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Network\Exception\NotFoundException When record not found.
     */
    public function edit($id = null)
    {
        $user = $this->users->get($id, [
            'contain' => []
        ]);
        if ($this->request->is(['patch', 'post', 'put'])) {
            $user = $this->users->patchEntity($user, $this->request->data);
            if ($this->Users->save($user)) {
                $this->Flash->success(__('The User has been saved.'));

                return $this->redirect(['action' => 'index']);
            } else {
                $this->Flash->error(__('The User could not be saved. Please, try again.'));
            }
        }
        $this->set(compact('user'));
//        $this->set('_serialize', ['User']);
    }
    public function setLanguage($language)
    {
        $status =  $this->setLanguage($language); // TODO: Change the autogenerated stub
        return $this->responseData($status);
    }

    /**
     * Delete method
     *
     * @param string|null $id User id.
     * @return \Cake\Network\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete($id = null)
    {
        $this->request->allowMethod(['post', 'delete']);
        $user = $this->users->get($id);
        if ($this->users->delete($user)) {
            $this->Flash->success(__('The User has been deleted.'));
        } else {
            $this->Flash->error(__('The User could not be deleted. Please, try again.'));
        }

        return $this->redirect(['action' => 'index']);
    }
}
